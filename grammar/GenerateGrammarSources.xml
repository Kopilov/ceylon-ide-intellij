<!--
   To build the reference docs for a particular language only, use "ant -Dlang=en", for
   example, and call either lang.all, lang.docpdf, lang.dochtml, or lang.dochtmlsingle
   for the target of your choice.

   You can also call lang.section-check to track down missing identifiers in a particular
   language, or you can call lang.revdiff to get a difference report for a particular
   language, compared with the English reference.
-->
<project name="Generate Grammar-related Sources" default="generateSources" basedir=".">
    <property name="base.path" location="../../ceylon/lib"/>

    <!-- Set build directories for all formats. -->
    <property name="build.dir" value="${basedir}/build"/>
    <property name="build.dist" value="../../ceylon/dist/dist"/>
    <property name="ceylon.repo.dir" value="${build.dist}/repo"/>
    <property name="build.classes" location="${build.dir}/classes"/>

    <property file="../../ceylon/common-build.properties"/>
    <property file="../../ceylon/lib/build.properties"/>

    <property name="src" location="src"/>
    <property name="gensrc" location="gensrc"/>
    <property name="gen" location="gen"/>

    <!-- ANTLR -->
    <property name="antlr.src" location="Ceylon.g"/>
    <property name="antlr.dst" location="${gensrc}"/>

    <!-- ################################################################## -->

    <target name="clean" depends="clean.antlr, clean.generated"
            description="Clean up everything.">
        <echoproperties/>
        <delete dir="${build.dir}"/>
    </target>

    <target name="clean.antlr">
        <delete dir="${antlr.dst}"/>
    </target>

    <target name="clean.generated">
        <delete dir="gen"/>
    </target>

    <!-- Antlr and code generation -->

    <target name="antlr" depends="antlr.tree"/>

    <target name="antlr.tree"
            description="Generate code from ANTLR grammar">
        <mkdir dir="${antlr.dst}/com/redhat/ceylon/compiler/typechecker/treegen"/>
        <java classname="org.antlr.Tool" dir="${basedir}" fork="yes">
            <arg value="-fo"/>
            <arg value="${antlr.dst}/com/redhat/ceylon/compiler/typechecker/treegen"/>
            <arg value="IdeaAstTypesGen.g"/>
            <arg value="PsiIntfGen.g"/>
            <arg value="PsiImplGen.g"/>
            <arg value="PsiFactoryGen.g"/>
            <arg value="NodeToIElementTypeMapGen.g"/>
            <classpath>
                <pathelement location="${antlr.lib}"/>
            </classpath>
        </java>
        <delete>
            <fileset dir="${antlr.dst}/com/redhat/ceylon/compiler/typechecker/treegen"
                     includes="*.tokens"/>
        </delete>
    </target>

    <target name="treegen" depends="antlr.tree">
        <mkdir dir="${build.classes}"/>
        <javac
                srcdir="${src}:${gensrc}"
                destdir="${build.classes}"
                debug="true"
                encoding="UTF-8">
            <classpath>
                <pathelement location="${antlr.lib}"/>
                <pathelement location="${ceylon.typechecker.lib}"/>
                <pathelement location="${ceylon.model.lib}"/>
            </classpath>

            <include name="com/redhat/ceylon/compiler/typechecker/treegen/*.java"/>
        </javac>
    </target>

    <property name="idea.home" location="${ant.home}/../.."/>
    <fail message="The 'openapi.jar' archive of the IDEA installation could not be found.
    Please check that the 'idea.home' property is set or
 that the ant process is started with the IDEA-bundle Ant tool.">
        <condition>
            <not>
                <available file="${idea.home}/lib/openapi.jar" />
            </not>
        </condition>
    </fail>


    <target name="tree" depends="treegen"
            description="Generate the tree builder code">
        <property name="NodesFile" location="../../ceylon/typechecker/Ceylon.nodes"/>
        <java classname="com.redhat.ceylon.compiler.typechecker.treegen.GenerateIdeaElements" dir="${basedir}" fork="yes">
            <arg value="${NodesFile}"/>
            <arg path="gen"/>
            <classpath>
                <pathelement location="${antlr.lib}"/>
                <pathelement location="${ceylon.typechecker.lib}"/>
                <pathelement location="${ceylon.model.lib}"/>
                <pathelement location="${build.classes}"/>
            </classpath>
        </java>
        <javac
                srcdir="${src}:${gen}:../plugin-ceylon-code/src"
                destdir="${build.classes}"
                debug="true"
                encoding="UTF-8">
            <classpath>
                <pathelement location="${antlr.lib}"/>
                <pathelement location="${ceylon.typechecker.lib}"/>
                <pathelement location="${ceylon.model.lib}"/>
            </classpath>

            <include name="*.java"/>
            <include name="org/intellij/plugins/ceylon/ide/ceylonCode/psi/CeylonPsi.java"/>
        </javac>
        <java classname="TokenTypesGenerator" dir="${basedir}" fork="yes">
            <arg path="gen"/>
            <classpath>
                <pathelement location="${antlr.lib}"/>
                <pathelement location="${ceylon.typechecker.lib}"/>
                <pathelement location="${ceylon.model.lib}"/>
                <pathelement location="${build.classes}"/>
            </classpath>
        </java>
        <java classname="CeylonPsiVisitorGenerator" dir="${basedir}" fork="yes">
            <arg path="gen"/>
            <classpath>
                <pathelement location="${antlr.lib}"/>
                <pathelement location="${ceylon.typechecker.lib}"/>
                <pathelement location="${ceylon.model.lib}"/>
                <pathelement location="${build.classes}"/>
                <pathelement location="${idea.home}/lib/openapi.jar"/>
                <pathelement location="${idea.home}/lib/util.jar"/>
            </classpath>
        </java>
    </target>

    <fail message="The ceylon Git repo is not accessible locally">
        <condition>
            <not>
                <available file="${build.dist}" />
            </not>
        </condition>
    </fail>

    <target name="generateSources" depends="clean, tree" >
        <mkdir dir="../plugin-ceylon-code/gen"/>
        <copy todir="../plugin-ceylon-code/gen" overwrite="true" >
            <fileset dir="gen" includes="**/*.java"/>
        </copy>
    </target>
</project>
